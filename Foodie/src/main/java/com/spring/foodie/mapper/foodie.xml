<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="foodie">
	
	<!-- #### 중요 #### 
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는 
		       그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
	-->
	
	<!-- === #139. 로그인 처리하기 === 
	                  먼저, 위의 #47  을 주석처리 하고서 아래처럼 한다. -->
	<select id="getLoginMember" resultType="com.spring.foodie.model.MemberVO" parameterType="HashMap">     
		select userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender
		     , birthyyyy, birthmm, birthdd, coin, point, registerday, pwdchangegap
		     , nvl( lastlogingap, trunc( months_between(sysdate, registerday) )) as lastlogingap
		     , gradelevel 
		from
		(
		select userid, name, email, mobile, postcode, address, detailaddress, extraaddress, gender
		     , substr(birthday,1,4) as birthyyyy, substr(birthday,6,2) as birthmm, substr(birthday,9) as birthdd
		     , coin, point, to_char(registerday,'yyyy-mm-dd') as registerday
		     , trunc( months_between(sysdate, lastpwdchangedate) ) as pwdchangegap
		     , gradelevel 
		from tbl_member
		where status = 1 and userid = #{userid} and pwd = #{pwd} 
		) M 
		cross join 
		(
		select trunc( months_between(sysdate, max(logindate)) ) as lastlogingap 
		from tbl_loginhistory 
		where fk_userid = #{userid} 
		) H
	</select>
	<update id="updateIdle" parameterType="String">
		update tbl_member set idle = 1
		where userid = #{userid}
	</update> 
	
	<!-- === #147. 원글 또는 답변글 글쓰기(파일첨부가 없는 글쓰기) === 
	                  먼저 #57  을 주석처리한 후 아래처럼 해야 한다. 
	 -->
	<insert id="add" parameterType="com.spring.foodie.model.BoardVO">
		<if test='fk_seq.equals("")'>
			insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
	    	values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default)  
	    </if>
	    
	    <if test='!fk_seq.equals("")'>
	    	insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno)
	    	values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1)  
		</if>
	</insert>
	
	<!-- 먼저  #61 을 주석처리를 하고서 아래의 작업을 한다. -->
	<!-- == #95. 페이징 처리를 안한 검색어가 없는 전체 글목록 보여주기 == 
	                          전체 글목록을 보여줄때 딸린 댓글의 개수도 보여준다. --> 
	<select id="boardListNoSearch" resultType="com.spring.foodie.model.BoardVO">
		select seq, fk_userid, name, subject  
		     , readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount 
		from tbl_board
		where status = 1
		order by seq desc
	</select>
	
	
	<!--  == #66. 글조회수 1증가 하기  ==  -->
	<update id="setAddReadCount" parameterType="String">
		update tbl_board set readCount = readCount + 1 
		where seq = #{seq}
	</update>

	<!--  == #161. (댓글 및 답변글 쓰기 및 파일첨부가 있는 게시판에서) 글 1개 보여주기  == 
	                  먼저 위의 #140 을 주석처리 한 다음에 아래와 같이 한다.
	-->
	<select id="getView" parameterType="String" resultType="com.spring.foodie.model.BoardVO">
		select previousseq, previoussubject
		     , seq, fk_userid, name, subject, content, readCount, regDate
		     , nextseq, nextsubject
		     , groupno, fk_seq, depthno 
		     , fileName, orgFilename, fileSize 
		from 
		(
		    select   lag(seq,1) over(order by seq desc) AS previousseq 
		           , lag(subject,1) over(order by seq desc) AS previoussubject
		            
		           , seq, fk_userid, name, subject, content, readCount
		           , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate
		    
		           , lead(seq,1) over(order by seq desc) AS nextseq 
		           , lead(subject,1) over(order by seq desc) AS nextsubject
		           
		           , groupno, fk_seq, depthno
		           , fileName, orgFilename, fileSize 
		    from tbl_board
		    where status = 1
		) V 
		where V.seq = #{seq}		
	</select>	


    <!-- == #75. 1개글 수정하기 == -->
    <update id="edit" parameterType="com.spring.foodie.model.BoardVO">
    	update tbl_board set subject = #{subject}
    	                   , content = #{content}
    	where seq = #{seq} and pw = #{pw} 
    </update>
    
    
   <!-- == #80. 1개글 수정하기 == -->
   <delete id="del" parameterType="HashMap">
   		delete from tbl_board
   		where seq = #{seq} and pw = #{pw}
   </delete>
   
   
   <!--  === #88. 댓글쓰기(tbl_comment 테이블에 insert) === -->
   <insert id="addComment" parameterType="com.spring.foodie.model.CommentVO">
    	insert into tbl_comment(seq, fk_userid, name, content, regDate, parentSeq, status)
        values(commentSeq.nextval, #{fk_userid}, #{name}, #{content}, default, #{parentSeq}, default)
   </insert>
	 
	<!--  === #89. tbl_board 테이블에 commentCount 컬럼의 값을 1증가(update) === -->  
	<update id="updateCommentCount" parameterType="String">
    	update tbl_board set commentCount = commentCount + 1 
    	where seq = #{parentSeq}
    </update>
    
    <!-- === #89.-2  tbl_member 테이블에 point 컬럼의 값을 넘어온 숫자만큼(예: 50) 증가(update) === --> 
	<update id="updateMemberPoint" parameterType="HashMap">
    	update tbl_member set point = point + to_number(#{point}) 
		where userid = #{userid}
    </update>
    
    
    <!-- == #93. 원게시글에 딸린 댓글들을 조회해오는 것 == -->
    <select id="getCommentList" parameterType="String" resultType="com.spring.foodie.model.CommentVO"> 
        select name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate 
    	from tbl_comment
    	where status = 1 and parentSeq = #{parentSeq}
    	order by seq desc
    </select>
    
    
    <!-- == #100. BoardAOP 클래스에 사용하는 것으로 특정 회원에게 특정 점수만큼 포인트를 증가하기 위한 것  -->
    <update id="pointPlus" parameterType="HashMap">
    	update tbl_member set point = point + to_number(#{point})
    	where userid = #{fk_userid}
    </update>
    
    
    <!-- #### 중요 #### 
		 HashMap 타입으로 매개변수를 받아온 것을 꺼내서 사용할때 
		 1. 데이터로 사용할때는 #{key명} 이고,
		 2. 식별자(테이블명, 컬럼명)로 사용할때는 ${key명} 이고,
		 3. myBatis 에서 제공하는 if 엘리먼트나 choose 엘리먼트 안에서 사용할때는 
		       그냥 <if test="key명"> <when test="key명"> 으로 사용한다. 
	-->
    <!-- == #105. 페이징 처리를 안한 검색어가 있는 전체 글목록 보여주기 == -->
    <select id="boardListSearch" parameterType="HashMap" resultType="com.spring.foodie.model.BoardVO">
    	select seq, fk_userid, name, subject  
		     , readcount, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
		     , commentCount 
		from tbl_board
		where status = 1
		<if test='searchWord != ""'>
        and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
        </if>
		order by seq desc
    </select>
    
    
    <!--  === #111. 검색어 입력시 자동글 완성하기 6 === -->
    <select id="wordSearchShow" parameterType="HashMap" resultType="String">
    	select ${searchType}        
		from tbl_board
		where status = 1
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		order by seq desc
    </select>
    
    
    <!-- === #117. 총 게시물 건수(totalCount) 구하기 - 검색이 있을때와 검색이 없을때로 나뉜다. === -->
    <select id="getTotalCount" parameterType="HashMap" resultType="int">
    	select count(*)       
		from tbl_board
		where status = 1
		<if test='searchWord != ""'>
		and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%'
		</if>
    </select>
    
	<!-- === #160. 파일첨부가 있는 답변형 게시판의 페이징 처리한 글목록 가져오기(검색이 있든지, 검색이 없든지 모두 다 포함한것) ===
                          먼저 위의 #148 을 주석처리한 이후에 아래와 같이 한다.
     -->
    <select id="boardListSearchWithPaging" parameterType="HashMap" resultType="com.spring.foodie.model.BoardVO"> 
    	select seq, fk_userid, name, subject, readCount, regDate, commentCount  
             , groupno, fk_seq, depthno 
             , fileName 
        from 
		(
		    select rownum AS rno
		         , seq, fk_userid, name, subject, readCount, regDate, commentCount  
		         , groupno, fk_seq, depthno 
		         , fileName   
		    from 
		    (
		        select seq, fk_userid, name, subject, readCount, 
		               to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') AS regDate,
		               commentCount, 
		               groupno, fk_seq, depthno
		              ,fileName  
		        from tbl_board
		        where status = 1 
		        <if test='searchWord != ""'>
				and lower(${searchType}) like '%'|| lower(#{searchWord}) ||'%' 
				</if>
		        start with fk_seq = 0 
		        connect by prior seq = fk_seq    
		        order siblings by groupno desc, seq asc  
		    ) V 
		) T 
		where rno between #{startRno} and #{endRno} 
	</select>    
    
    
    <!-- === #131. 원게시물에 딸린 댓글들을 페이징처리해서 조회해오기(Ajax 로 처리) === -->
    <select id="getCommentListPaging" parameterType="HashMap" resultType="com.spring.foodie.model.CommentVO"> 
    	select name, content, regDate
		from 
		(
		   select row_number() over(order by seq desc) as rno, name, content, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regDate 
		   from tbl_comment
		   where status = 1 and parentSeq = #{parentSeq}
		) V
		where rno between #{startRno} and #{endRno}
    </select>
    
    
    <!-- === #135. 원게시물에 딸린 댓글 totalPage 알아오기 (Ajax 로 처리) === -->
    <select id="getCommentTotalCount" parameterType="HashMap" resultType="int">
    	select count(*) 
    	from tbl_comment
		where status = 1 and parentSeq = #{parentSeq} 
    </select>
    
    
    <!-- === #146. tbl_board 테이블에서 groupno 컬럼의 최대값 구하기 === -->
    <select id="getGroupnoMax" resultType="int">
    	select nvl(max(groupno), 0)
    	from tbl_board
    </select>
    

    <!-- === #159. 글쓰기(파일첨부가 있는 글쓰기) === -->
    <insert id="add_withFile" parameterType="com.spring.foodie.model.BoardVO">
		<if test='fk_seq.equals("")'>
			insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize) 
	    	values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, default, default, #{fileName}, #{orgFilename}, #{fileSize})  
	    </if>
	    
	    <if test='!fk_seq.equals("")'>
	    	insert into tbl_board(seq, fk_userid, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depthno, fileName, orgFilename, fileSize)
	    	values(boardSeq.nextval, #{fk_userid}, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depthno}+1 #{fileName}, #{orgFilename}, #{fileSize},)  
		</if>
	</insert>
	
	
 
  <select id="searchList" parameterType="HashMap" resultType="com.spring.foodie.model.SearchVO">
    SELECT ROWNUM, STORE.CODE, STORE.TYPE, STORE.OPEN_STATUS, STORE.HYGINE, STORE.NAME, STORE.CALL,
    NVL(STORE.POSTCODE_NEW, STORE.POSTCODE_OLD) AS POSTCODE, NVL(STORE.ADDR_NEW, STORE.ADDR_OLD) AS ADDRESS
    FROM ( SELECT CODE, DIST_CODE, OPEN_STATUS, STATUS_DETAIL, CALL, POSTCODE_OLD, ADDR_OLD, POSTCODE_NEW, ADDR_NEW,
    NAME, BUSINESS_TYPE, COORDINATES_X, COORDINATES_Y, HYGIENE_TYPE AS HYGINE, BUSINESS_TYPE AS BUSINESS, TYPE,
    NAME || ADDR_OLD || ADDR_NEW || HYGIENE_TYPE || BUSINESS_TYPE || NAME || ADDR_OLD || ADDR_NEW || HYGIENE_TYPE || BUSINESS_TYPE AS
    SEARCH_ALL
    FROM STORE_KOREA WHERE STATUS_DETAIL = '영업' ORDER BY NVL(POSTCODE_NEW, POSTCODE_OLD) ASC) STORE
    WHERE LOWER(REPLACE(TRIM(STORE.SEARCH_ALL), ' ', ''))
    LIKE LOWER(REPLACE(TRIM('%'||#{searchWord}||'%'), ' ', '%'))
    ORDER BY ROWNUM ASC
  </select>
	
	

	<!-- 지훈시작  -->
		
	<!-- == 상품가게 에 딸린 댓글들 대댓글 정리 이전을 조회해오는 것  -->
    <select id="getCommentList" parameterType="String" resultType="com.spring.foodie.model.CommentVO"> 
		select seq, fk_email, name, content, spoint, regDate, store_id, status, likecnt, cntcomments, parentSeq, depthno, groupno
     
			from 
			(
    		select rownum AS rno
         	, seq, fk_email, name, content, spoint, regDate, store_id, status, likecnt, cntcomments, parentSeq, depthno, groupno
    		from 
		    	(
        			select seq, fk_email, name, content, spoint, regDate, store_id, status, likecnt, cntcomments, parentSeq, depthno, groupno
        			from tbl_comment
        			where status = 1 and store_id = #{code}
        			start with parentSeq = 0 
        			connect by prior seq = parentSeq 
	        		order siblings by groupno desc, seq asc  
        
    			) V 
			) T 
		where rno between 1 and 10
    </select>
    
   <!--  === 댓글쓰기(tbl_comment 테이블에 insert) === -->
   
   
   <insert id="addComment" parameterType="com.spring.foodie.model.CommentVO">
    	insert into tbl_comment(seq, fk_email, name, content, spoint, regDate, store_id, status, likecnt, cntcomments, parentSeq, depthno, groupno)
    	<if test='parentSeq == "0"'>
    		values(commentSeq.nextval, #{fk_email}, #{name}, #{content}, #{spoint}, default, #{store_id}, default, default, default, #{parentSeq}, default, groupSeq.nextval)
    	</if>
    	<if test='parentSeq != "0"'>
    		values(commentSeq.nextval, #{fk_email}, #{name}, #{content}, 0, default, #{store_id}, default, default, default, #{parentSeq}, #{depthno}+1, #{groupno})
        </if>
   </insert>
   
   	
	<update id="addCommentCnt" parameterType="String">
			
    	update tbl_comment set CNTCOMMENTS = CNTCOMMENTS + 1 
    	where seq = #{parentSeq}
    
	</update>
		
	<select id="emailDuplicateCheck" parameterType="String" resultType="com.spring.foodie.model.MemberVO">
      select * from tbl_member where email = #{email}
   </select>
   
   <!-- === 로그인 처리하기 === -->
   <select id="getLoginMember" resultType="com.spring.foodie.model.MemberVO" parameterType="HashMap">     
      select no, type, kakaoid, name, email, pwd, to_char(registerday, 'yyyy-mm-dd'), status, idle      
      from tbl_member
      where email = #{email} and pwd = #{pwd} 
   </select>

   <!-- === 카카오로그인 처리하기 === -->
   <select id="getkakaoLoginMember" resultType="com.spring.foodie.model.MemberVO" parameterType="String">     
      select no, type, kakaoid, name, email, pwd, registerday, status, idle      
      from tbl_member
      where  kakaoid = #{kakaoid}  
   </select>
   
   
   
   <insert id="setLoginHistory" parameterType="HashMap">
   
         insert into tbl_loginhistory(fk_email, logindate, clientip)
          values(#{email}, default, #{clientip})  
   </insert>
   
   <!-- == 로그인 갭 가져오기 == -->
   <select id="getloginHistoryGap" resultType="com.spring.foodie.model.LoginHistoryVO" parameterType="String">     
   select trunc( months_between(sysdate, max(logindate)) ) AS lastlogingap
    from tbl_loginhistory 
    where fk_email = #{email} 
   </select>
   
   
   <insert id="registerMember" parameterType="HashMap">
   insert into tbl_member(no, type, kakaoid, name, email, pwd, mobile,
   registerday, status, idle)
   values(seq_memberno.nextval, default, #{kakaoid}, #{name}, #{email}, #{pwd}, #{mobile}, default,
   default, default)   
   </insert>    
   
<!--    <insert id="createAuthKey">
   insert into userAuth values(#{userEmail}, #{authKey})
   </insert>

   <update id="userAuth">
      <![CDATA[update user set userCertification = 1 where (select count(*) from userAuth where userEmail = #{userEmail}) > 0]]>
   </update> -->
   

   <select id="getUserInfo" resultType="com.spring.foodie.model.MemberVO" parameterType="String">
      select * from tbl_member where email = #{email} 
   </select>	
		
	<!-- 지훈 끝  -->
	
	
	
	<insert id="likeAdd" parameterType="HashMap">
   insert into tbl_comment_like(FK_EMAIL, FK_SEQ)
   values(#{email}, #{seq})
	</insert>
	
	
	<update id="likeAddCnt" parameterType="String">
		update tbl_comment set likecnt = likecnt + 1 
    	where seq = #{seq}
	</update>
	
	
	<delete id="delLike" parameterType="HashMap">
		delete from tbl_comment_like
		where fk_email = #{email} and fk_seq = #{seq}
	</delete>
		
	<update id="likeDelCnt" parameterType="String">
		update tbl_comment set likecnt = likecnt - 1 
    	where seq = #{seq}	
	</update>
	 
	 
	 <select id="duplicateCheckLike" parameterType="HashMap" resultType="int">
	 	select count(*) 
	 	from tbl_comment_like
		where fk_email = #{email} and fk_seq = #{seq}
	 </select>
</mapper>



